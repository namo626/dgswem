name: Compilation and test cases
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        toolchain:
          - {compiler: gcc, version: 12}
          - {compiler: gcc, version: 13}
          - {compiler: nvidia-hpc, version: '24.5'}
          - {compiler: nvidia-hpc, version: '25.1'}

    steps:
      - uses: namo626/setup-fortran@main
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}


      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python packages
        run: pip install -r requirements.txt

      - name: Compile
        run: make
        working-directory: work

      - name: Testcases
        id: testcases
        run: make test
        working-directory: work

      - name: Create compatibility report
        shell: bash
        run: |
          mkdir -p compat
          support=$([ "${{ steps.testcases.outcome }}" == "success" ] && echo "&check;" || echo "")
          prefix="${{ matrix.os }},${{ matrix.toolchain.compiler }},${{ matrix.toolchain.version }}"
          report="compat/${prefix//,/_}.csv"
          echo "$prefix,$support" >> "$report"
          cat "$report"

      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        with:
          name: compat-${{ matrix.os }}-${{ matrix.toolchain.compiler }}-${{ matrix.toolchain.version }}
          path: compat/*.csv


  compat:
    name: Report compatibility
    needs:
      - test
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install packages
        run: pip install -r requirements.txt

      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          pattern: compat-*
          path: compat
          merge-multiple: true

      - name: Concatenate reports
        run: |
          echo "runner,compiler,version,support" > .github/compat/long_compat.csv
          cat compat/*.csv >> .github/compat/long_compat.csv

      - name: Make wide reports
        working-directory: .github/compat
        run: |
          python wide_compat_reports.py "long_compat.csv" "compat.csv"
          cat compat.md

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compat
          path: |
            .github/compat/long_compat.csv
            .github/compat/compat.csv
            .github/compat/compat.md

      - name: Check for changes
        working-directory: .github/compat
        id: diff
        run: |
          if ! [ -f compat.csv ]; then
            echo "diff=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          diff=$(git diff compat.csv)
          if [[ $diff == "" ]]; then
            echo "No changes found"
            echo "diff=false" >> $GITHUB_OUTPUT
          else
            echo "Changes found:"
            echo "$diff"
            echo "diff=true" >> $GITHUB_OUTPUT
          fi

      - name: Update README
        if: ${{ steps.diff.outputs.diff == 'true' }}
        run: python .github/compat/update_compat_table.py ".github/compat/compat.md" "README.md"

      - name: Print README diff
        if: ${{ steps.diff.outputs.diff == 'true' }}
        run: git diff README.md

      - name: Create pull request
        if: ${{ steps.diff.outputs.diff == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          now=$(date +'%Y-%m-%dT%H-%M-%S')
          updated_branch="compat_$now"
          default_branch="${{ github.event.repository.default_branch }}"

          git switch -c "$updated_branch"
          git add .github/compat/*compat.csv README.md
          git commit -m "Update compatibility matrix"
          git push -u origin "$updated_branch"
          gh pr create -B "$default_branch" -H "$updated_branch" --title "Update compatibility matrix" --body-file .github/compat/compat.md
